#!/bin/bash -ex

bucket_name="test-connect-$(uuidgen | tr \"[:upper:]\" \"[:lower:]\")"

check_pod_is_ready() {
  local app_name="$1"
  local namespace="${2:-default}"
  local jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'

  local pod_conditions="$(kubectl get po -n "$namespace" -l app="$app_name" -o jsonpath="$jsonpath" 2>&1)"
  echo "$pod_conditions" | grep "Ready=True"
}

check_jobs_are_done() {
  local job_name="$1"
  local namespace="${2:-default}"
  local jsonpath="{range @.items[*]}{@.status}{end}"
  local job_conditions="$(kubectl get jobs -n "$namespace" -o jsonpath="$jsonpath")"
  echo "$job_conditions" | grep "type:Complete status:True"
}

install_aws_cli() {
  curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip" && unzip awscli-bundle.zip && sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
}

prep_s3() {
  command -v aws &>/dev/null || install_aws_cli
  aws s3 mb "s3://$bucket_name" --region "us-west-2"
}

check_s3() {
  partition="${1:-topics/ac-user-event/year=2018/month=01/day=04}"
  aws s3 ls "s3://$bucket_name/$partition/"
}

check_s3_health_metrics() {
  partition="${1:-topics/health-metrics/year=2018/month=01/day=04}"
  aws s3 ls "s3://$bucket_name/$partition/"
}

clean_up_s3() {
  aws s3 rb "s3://$bucket_name" --force
}

repeat_and_sleep() {
  local max_sleep="${3:-30}"
  total_sleep=0
  local command_result="$($1)"
  until [[ -n "$command_result" || "$total_sleep" -ge "$max_sleep" ]]; do
    sleep "$2"
    local command_result="$($1)"
    let total_sleep+="$2"
  done
  if [[ "$total_sleep" -ge "$max_sleep" ]]; then
      exit 1
  fi
}

set_quay_secret() {
  set +x
  local namespace="${1:-default}"
  local quay_auth="$(echo -n "$QUAY_USERNAME:$QUAY_PASSWORD" | base64 -w 0)"
  local quay_auth_json="$(echo -n '{
  "auths": {
    "quay.io": {
      "auth": "'"$quay_auth"'",
      "email": ""
    }
  }
}' | base64 -w 0)"

  printf "apiVersion: v1\nkind: Secret\nmetadata:\n  name: quay-sts\ndata:\n  .dockerconfigjson: %s\ntype: kubernetes.io/dockerconfigjson" "$quay_auth_json" > quay-sts.yaml
  kubectl create -f quay-sts.yaml -n "$namespace"
  set -x
}

set_aws_secret() {
  set +x
  mkdir -p $HOME/.aws
  echo -n '[default]
aws_access_key_id = '"$AWS_ACCESS_KEY_ID"'
aws_secret_access_key = '"$AWS_SECRET_ACCESS_KEY" > "$HOME/.aws/credentials"
  kubectl create secret generic aws-s3-creds --from-file=$HOME/.aws/credentials
  set -x
}

post_some_data() {
  local app_name="$1"
  local namespace="${2:-default}"
  local port_num="$3"
  local jsonpath='{range .items[*]}{@.metadata.name}{end}'
  kubectl exec -it "$(kubectl get po -o jsonpath="$jsonpath" -l app="$app_name" | tail -n 1)" -- \
          curl -X POST -H "Content-Type: application/vnd.kafka.avro.v2+json" \
          -H "Accept: application/vnd.kafka.v2+json" \
          --url "http://localhost:8082/topics/ac-user-event" \
          --data '{"value_schema":"{\"type\":\"record\",\"name\":\"user_event\",\"namespace\":\"com.sts\",\"fields\":[{\"name\":\"product_id\",\"type\":\"string\"},{\"name\":\"user_oid\",\"type\":\"string\"},{\"name\":\"first_login\",\"type\":\"string\"},{\"name\":\"product_instance_id\",\"type\":\"string\"},{\"name\":\"metric_date\",\"type\":\"string\"},{\"name\":\"slug_name\",\"type\":\"string\"},{\"name\":\"edition\",\"type\":\"string\"},{\"name\":\"stack\",\"type\":\"string\"}]}","records":[{"value":{"product_id":"wakawakawaka","user_oid":"someothergreatinfo","first_login":"meow","product_instance_id":"thebest","metric_date":"2018-01-04","slug_name":"sluggy-slug-slug","edition":"numero-uno","stack":"full-stack"}}]}'
}

send_a_bunch_of_data() {
  local app_name="$1"
  local max_count="${2:-4}"
  count=0
  until [[ "$count" -ge "$max_count" ]]; do
    post_some_data "local-kafka-rest" "default" "8082"
    let count+=1
  done
}

post_some_health_metric_data() {
  local app_name="$1"
  local namespace="${2:-default}"
  local port_num="$3"
  local jsonpath='{range .items[*]}{@.metadata.name}{end}'
  kubectl exec -it "$(kubectl get po -o jsonpath="$jsonpath" -l app="$app_name" | tail -n 1)" -- \
          curl -X POST -H "Content-Type: application/vnd.kafka.avro.v2+json" \
          -H "Accept: application/vnd.kafka.v2+json" \
          --url "http://localhost:8082/topics/health-metrics" \
          --data '{"value_schema":"{ \"type\": \"record\", \"name\": \"HealthMetric\", \"namespace\": \"com.sts\", \"fields\": [ { \"name\": \"product_id\", \"type\": \"string\" }, { \"name\": \"product_instance_id\",\"type\": \"string\" }, { \"name\": \"user_id\", \"type\": [\"null\",\"string\"], \"default\": null }, { \"name\": \"entitlement\", \"type\": [\"null\", { \"type\": \"record\", \"name\": \"entitlementInfo\", \"fields\": [ { \"name\": \"sfdc_account_id\", \"type\": \"string\" }, { \"name\": \"sap_material_id\",\"type\": \"string\" }, { \"name\": \"tops_product_code\",\"type\": \"string\" }, { \"name\": \"software_type\",\"type\": \"string\" }, { \"name\": \"support_site_ids\",\"type\": { \"type\": \"array\", \"items\": \"string\" } } ] }], \"default\": null }, { \"name\": \"sfdc_account_id\", \"type\": \"string\" }, { \"name\": \"description\", \"type\": [\"null\",\"string\"] }, { \"name\": \"metric_date\", \"type\": \"string\" }, { \"name\": \"health\", \"type\": \"double\" }, { \"name\": \"metrics\", \"type\": { \"type\": \"map\", \"values\": [ \"string\", { \"type\": \"map\", \"values\": \"string\" } ] } } ] }","records":[{"value": {"product_id":"ALM","product_instance_id":"125524","user_id":null,"entitlement":{"com.sts.entitlementInfo":{"sfdc_account_id":"0013000000HQY9PAAX","sap_material_id":"AGCUNL990","tops_product_code":"AGCUNL99000","software_type":"saas","support_site_ids":["00000195222"]}},"sfdc_account_id":"0013000000HQY9PAAX","description":{"string":"ALM Health Metrics"},"metric_date":"2018-01-23","health":6.28,"metrics":{"perc_user_provisioned":{"string":"0.714"},"weekly_task_growth":{"string":"8"},"monthly_perc_user_utilization":{"string":"0.95"},"release_count":{"string":"3"},"weekly_perc_user_utilization":{"string":"0.65"},"date_dimension_id":{"string":"2018-01-23"},"created_at":{"string":"2018-01-24 04:33:10 UTC"},"weekly_portfolio_item_growth":{"string":"2"},"per_user_us_growth":{"string":"0.05"},"defect_count":{"string":"14"},"weekly_test_case_growth":{"string":"0"},"thirty_day_users":{"string":"19"},"task_count":{"string":"663"},"weekly_defect_growth":{"string":"0"},"per_user_portfolio_item_growth":{"string":"0.11"},"updated_at":{"string":"2018-01-25 18:53:25 UTC"},"subscription_dimension_id":{"string":"275410"},"monthly_defect_growth":{"string":"6"},"monthly_test_case_growth":{"string":"1"},"id":{"string":"6478760"},"total_seats":{"string":"28"},"user_story_count":{"string":"1191"},"per_user_tc_growth":{"string":"0.0"},"monthly_task_growth":{"string":"152"},"weekly_user_story_growth":{"string":"1"},"monthly_user_story_growth":{"string":"37"},"health":{"string":"6.28"},"per_user_task_growth":{"string":"0.42"},"monthly_users":{"string":"19"},"portfolio_item_count":{"string":"54"},"daily_users":{"string":"7"},"avg_weekly_users":{"string":"13.71"},"iteration_count":{"string":"16"},"active_release_count":{"string":"1"},"test_case_count":{"string":"26"},"per_user_defect_growth":{"string":"0.0"},"monthly_artifact_growth":{"string":"206"},"enabled_users":{"string":"20"},"active_iteration_count":{"string":"2"},"ninety_day_users":{"string":"19"},"weekly_users":{"string":"13"},"health2":{"string":"6.47"},"monthly_portfolio_item_growth":{"string":"10"}}}}]}'
}

send_a_bunch_of_health_metric_data() {
  local app_name="$1"
  local max_count="${2:-4}"
  count=0
  until [[ "$count" -ge "$max_count" ]]; do
    post_some_health_metric_data "local-kafka-rest" "default" "8082"
    let count+=1
  done
}


main () {
  prep_s3
  set_aws_secret
  set_quay_secret
  cd prism-lts
  helm dep update
  helm dep build
  helm upgrade --install test-prism-lts . --set "acUserEventConnectJob.flushSize=2" --set "healthMetricsConnectJob.flushSize=2" --set "acUserEventConnectJob.s3BucketName=$bucket_name" --set "healthMetricsConnectJob.s3BucketName=$bucket_name" --set tags.prism-lts-test-values=true --wait
  repeat_and_sleep 'check_pod_is_ready prism-lts' "1"
  repeat_and_sleep 'check_pod_is_ready local-kafka-rest' "1"
  repeat_and_sleep 'check_jobs_are_done' "15" "120"
  send_a_bunch_of_data
  repeat_and_sleep 'check_s3' "2" "30"
  send_a_bunch_of_health_metric_data
  repeat_and_sleep 'check_s3_health_metrics' "2" "30"
}

{ main "$@" && clean_up_s3 || exit 0; } || { clean_up_s3 && exit 1; }
