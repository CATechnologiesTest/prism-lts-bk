#!/bin/bash -ex

bucket_name="test-connect-$(uuidgen)"

check_pod_is_ready() {
  local app_name="$1"
  local namespace="${2:-default}"
  local jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'

  local pod_conditions="$(kubectl get po -n "$namespace" -l app="$app_name" -o jsonpath="$jsonpath" 2>&1)"
  echo "$pod_conditions" | grep "Ready=True"
}

post_some_data() {
  local app_name="$1"
  local namespace="${2:-default}"
  local port_num="$3"
  local jsonpath='{range .items[*]}{@.metadata.name}{end}'
  kubectl exec -it "$(kubectl get po -o jsonpath="$jsonpath" -l app="$app_name" | tail -n 1)" -- \
          curl -vX POST -H "Content-Type: application/vnd.kafka.avro.v2+json" \
          -H "Accept: application/vnd.kafka.v2+json" \
          --url "http://localhost:8082/topics/ac-user-event" \
          --data '{"value_schema":"{\"type\":\"record\",\"name\":\"user_event\",\"namespace\":\"com.sts\",\"fields\":[{\"name\":\"product_id\",\"type\":\"string\"},{\"name\":\"user_oid\",\"type\":\"string\"},{\"name\":\"first_login\",\"type\":\"string\"},{\"name\":\"product_instance_id\",\"type\":\"string\"},{\"name\":\"metric_date\",\"type\":\"string\"},{\"name\":\"slug_name\",\"type\":\"string\"},{\"name\":\"edition\",\"type\":\"string\"},{\"name\":\"stack\",\"type\":\"string\"}]}","records":[{"value":{"product_id":"wakawakawaka","user_oid":"someothergreatinfo","first_login":"meow","product_instance_id":"thebest","metric_date":"2018-01-04","slug_name":"sluggy-slug-slug","edition":"numero-uno","stack":"full-stack"}}]}'
}

install_aws_cli() {
  curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip" && unzip awscli-bundle.zip && sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
}

prep_s3() {
  command -v aws &>/dev/null || install_aws_cli
  aws s3 mb "s3://$bucket_name" --region "us-west-2"
}

check_s3() {
  aws s3 ls "s3://$bucket_name/"
}

clean_up_s3() {
  aws s3 rm "s3://$bucket_name" --recursive
  aws s3 rb "s3://$bucket_name"
}

repeat_and_sleep() {
  local max_sleep="${3:-30}"
  total_sleep=0
  local command_result="$($1)"
  until [[ -n "$command_result" || "$total_sleep" -ge "$max_sleep" ]]; do
    sleep "$2"
    local command_result="$($1)"
    let total_sleep+="$2"
  done
}

set_quay_secret() {
  set +x
  local namespace="${1:-default}"
  local quay_auth="$(echo -n "$QUAY_USERNAME:$QUAY_PASSWORD" | base64 -w 0)"
  local quay_auth_json="$(echo -n '{
  "auths": {
    "quay.io": {
      "auth": "'"$quay_auth"'",
      "email": ""
    }
  }
}' | base64 -w 0)"

  printf "apiVersion: v1\nkind: Secret\nmetadata:\n  name: quay-sts\ndata:\n  .dockerconfigjson: %s\ntype: kubernetes.io/dockerconfigjson" "$quay_auth_json" > quay-sts.yaml
  kubectl create -f quay-sts.yaml -n "$namespace"
  set -x
}

set_aws_secret() {
  mkdir -p $HOME/.aws
  echo -n '[default]
aws_access_key_id = '"$AWS_ACCESS_KEY_ID"'
aws_secret_access_key = '"$AWS_SECRET_ACCESS_KEY" > "$HOME/.aws/credentials"
  kubectl create secret generic aws-s3-creds --from-file=$HOME/.aws/credentials
}

main () {
  prep_s3
  set_aws_secret
  set_quay_secret
  cd prism-lts
  helm dep update
  helm upgrade --install test-prism-lts . --set "kafkaConnectJob.s3BucketName=$bucket_name" --set tags.prism-lts-test-values=true --wait
  repeat_and_sleep 'check_pod_is_ready prism-lts' "1"
  repeat_and_sleep 'check_pod_is_ready local-kafka-rest' "1"
  sleep 5
  post_some_data "local-kafka-rest" "default" "8082"
  sleep 5
  repeat_and_sleep 'check_s3' "3"
  clean_up_s3
}

main "$@" || clean_up_s3 && exit 1
